//
// Stanford CoreNLP build specification for 
// Gradle.
//
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'docker'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

// Gradle java plugin
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

version = '3.9.1'
def port = '9005'

// Gradle application plugin
mainClassName = "edu.stanford.nlp.pipeline.StanfordCoreNLPServer"

run {
    standardInput = System.in
}

run {
    standardInput = System.in
}

// Jar creation
jar {
    manifest {
        attributes 'Implementation-Title': 'Stanford CoreNLP',
                   'Implementation-Version': version,
		   'Main-Class': 'edu.stanford.nlp.pipeline.StanfordCoreNLP'
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

// Add src-extra build target
sourceSets {
  main {
    java.srcDirs = ['src/']
    resources.srcDirs = ['src/']
  }
}

task listDeps {
    doLast {
        configurations.compile.each { File file -> println file.name }
    }
}

dependencies {
  compile fileTree(dir: 'lib', include: '*.jar')
  testCompile fileTree(dir: 'liblocal', include: '*.jar')
}

// Eclipse plugin setup
eclipse {
  classpath {
    defaultOutputDir = file('bin/')
    file {
      beforeMerged { classpath ->
        classpath.entries.removeAll { entry -> entry.kind == 'lib' }
      }
    }
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

task server(type: JavaExec) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPServer"
  classpath = sourceSets.main.runtimeClasspath
  systemProperty "java.io.tmpdir", "/var/tmp"
  maxHeapSize = "4g"
  args "-port", port
//  args "-timeout", 15000
}

class RunMainTask extends JavaExec {
}  

tasks.withType(RunMainTask) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPClient"
  classpath = sourceSets.main.runtimeClasspath
  maxHeapSize = "4g"
  args '-annotators', 'tokenize,ssplit,pos,lemma,ner,parse,dcoref,sentiment'
  args '-outputFormat', 'text'
  if (project.hasProperty("cargs")) {
     args Eval.me(cargs)
  }
}  

task clientDebug(type: RunMainTask) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPClient"
  args '-backends', "localhost:${port}"
  jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"]
}

task client(type: RunMainTask) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPClient"
  args '-backends', "localhost:${port}"
}

task debug (type: RunMainTask) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLP"
  args '-annotators', 'tokenize,ssplit,pos,lemma,ner,parse,dcoref,sentiment'
  jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"]
}

task server(type: JavaExec) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPServer"
  classpath = sourceSets.main.runtimeClasspath
  maxHeapSize = "4g"
  systemProperty "java.io.tmpdir", "/var/tmp"
  args "-port", port
//  args "-timeout", 15000
//  jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5007"]
}

applicationName = 'corenlp'
distDocker {
    addFile("./edu", "/edu")
    exposePort(9005)
    push = true
    tagVersion = 'latest'
    registry = '303634175659.dkr.ecr.us-east-2.amazonaws.com'
    defaultCommand = ["-quiet", "-port", "9005"]
}

task runbatch (type: RunMainTask) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLP"
}

task server(type: JavaExec) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPServer"
  classpath = sourceSets.main.runtimeClasspath
  maxHeapSize = "4g"
  systemProperty "java.io.tmpdir", "/var/tmp"
  args "-port", port
//  args "-timeout", 15000
//  jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5007"]
}

