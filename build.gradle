//
// Stanford CoreNLP build specification for 
// Gradle.
//
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

// Gradle java plugin
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

version = '3.9.1'
def port = '9005'

// Gradle application plugin
mainClassName = "edu.stanford.nlp.pipeline.StanfordCoreNLP"

// Jar creation
jar {
    manifest {
        attributes 'Implementation-Title': 'Stanford CoreNLP',
                   'Implementation-Version': version,
		   'Main-Class': 'edu.stanford.nlp.pipeline.StanfordCoreNLP'
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

// Add src-extra build target
sourceSets {
  main {
    java.srcDirs = ['src/']
    resources.srcDirs = ['src/']
  }
}

task listDeps {
    doLast {
        configurations.compile.each { File file -> println file.name }
    }
}

dependencies {
  compile fileTree(dir: 'lib', include: '*.jar')
  testCompile fileTree(dir: 'liblocal', include: '*.jar')
}

// Eclipse plugin setup
eclipse {
  classpath {
    defaultOutputDir = file('bin/')
    file {
      beforeMerged { classpath ->
        classpath.entries.removeAll { entry -> entry.kind == 'lib' }
      }
    }
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}
task server(type: JavaExec) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPServer"
  classpath = sourceSets.main.runtimeClasspath
  systemProperty "java.io.tmpdir", "/var/tmp"
  maxHeapSize = "4g"
  args "-port", port
//  args "-timeout", 15000
}

task client(type: JavaExec) {
  main = "edu.stanford.nlp.pipeline.StanfordCoreNLPClient"
  classpath = sourceSets.main.runtimeClasspath
  maxHeapSize = "4g"
  args '-annotators', 'tokenize,ssplit,pos,lemma,ner,parse,dcoref,sentiment'
  args '-outputFormat', 'text'
  args '-backends', "localhost:${port}"
  if (project.hasProperty("cargs")) {
     args Eval.me(cargs)
  }
}
